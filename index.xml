<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SportyGeek </title>
    <link>https://girish3.github.io/index.xml</link>
    <language>en-us</language>
    <author>Girish Budhwani</author>
    <rights>(C) 1</rights>
    <updated>2017-05-28 00:00:00 &#43;0000 UTC</updated>

    
      
    
      
        <item>
          <title>The problem with OOP and how Golang solves it.</title>
          <link>https://girish3.github.io/2017/05/28/the-problem-with-oop-and-how-golang-solves-it./</link>
          <pubDate>Sun, 28 May 2017 00:00:00 UTC</pubDate>
          <author>Girish Budhwani</author>
          <guid>https://girish3.github.io/2017/05/28/the-problem-with-oop-and-how-golang-solves-it./</guid>
          <description>

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/golang.jpg&#34; width=&#34;720&#34;&gt;&lt;/p&gt;

&lt;p&gt;We have been using OOP paradigm for few decades now and the so called three pillars of OOP &amp;ndash; Inheritance, polymorphism and encapsulation, they seem to be essential and useful but they have an inherent problem. The problem so grave that if not handled well it will stick to your codebase like a cancer. It will make your code more resistance to change and anti-patterns will creep in. In this article, we will peek into the world of Go programming language and how it handles those issues in a very elegant fashion. I have been using Go for few months now and I consider myself novice so feel free to bash. Without further ado, let’s target each of the cracked pillars of OOP.&lt;/p&gt;

&lt;h1 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h1&gt;

&lt;p&gt;The concept of inheritance is so natural. We never separate code reuse from inheritance, they go hand in hand and yet we would think what can possibly be wrong with inheritance.&lt;/p&gt;

&lt;h2 id=&#34;the-fragile-base-class-problem&#34;&gt;The Fragile Base Class Problem&lt;/h2&gt;

&lt;h3 id=&#34;oo-s-way&#34;&gt;OO’s way&lt;/h3&gt;

&lt;p&gt;It may happen that even if you din’t make any change in your class and yet your code breaks.
Guess what? Change was actually done in the class you inherited from !!! Yes, it could happen and that’s the Fragile Base Class problem. It’s a very probable scenario that after you update your library dependency, it can bring some side effects because the library class you inherited from was changed. Let’s see it in action.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// the example is in Java&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above example is straight forward, &lt;code&gt;inc2()&lt;/code&gt; method is overridden, it will call &lt;code&gt;inc1()&lt;/code&gt; of base class and thus incrementing &lt;code&gt;i&lt;/code&gt; by 1. Let’s make a simple change in our Base class.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// the example is in Java&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// the change&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;inc1()&lt;/code&gt; method of Base class will now actually call an overridden &lt;code&gt;inc2()&lt;/code&gt; method and your program will be stuck in an infinite loop!! Inheritance is flawed.&lt;/p&gt;

&lt;p&gt;This is such a simple and effective demonstration for a case where you really have to dig up the source of the parent class in order to find out the cause for the unexpected behaviour. One way to solve the issue is to use Composition, but OOP languages do not make it easy to compose objects. They are made to make inheritance easy.&lt;/p&gt;

&lt;h3 id=&#34;go-s-way&#34;&gt;GO’s way&lt;/h3&gt;

&lt;p&gt;First of all, we cannot call Go an OOP language, it has structs (like C) and there are functions which you define on those structs (unlike C). If you combine the two then roughly you can call it a class. Here is a shocker &amp;ndash; &lt;strong&gt;there is no inheritance in Go&lt;/strong&gt; but what you can do is compose objects (structs) very easily using struct embedding. Let&amp;rsquo;s take an example.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Go’s syntax is very much like C, you should be fine &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// reading it.&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Defining Human type, it has a variable Name of type string. &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// (Yes, type is mentioned after variable name)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Defining a method GetName on the type Human which &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// returns a string.&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Human struct is embedded within Student, this is not &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// inheritance but composition. Composition can also be done&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// in a usual way by creating a Human type variable but there&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// are few advantages to using struct embedding.&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;human&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// type is implicit&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;student&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;human&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// you can actually do the following, even though getName() is&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Human&amp;#39;s method.&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks to method promotion, &lt;code&gt;GetName()&lt;/code&gt; method of type Human can be called directly on the Student type. In Java, we would have had to create a wrapper to call on methods of Human (extra work).&lt;/p&gt;

&lt;div class=&#34;message&#34;&gt;
    When we embed a type, the methods of that type become methods of the outer type, but when they are invoked, the receiver of the method is the inner type, not the outer one. &lt;/br&gt; 
    &lt;i&gt;— Effective Go book&lt;/i&gt;
&lt;/div&gt;

&lt;p&gt;Had we implemented the fragile base class example in Go, then &lt;code&gt;inc1()&lt;/code&gt; method of base class would have called its own &lt;code&gt;inc2()&lt;/code&gt; method and thus it wouldn’t have caused the issue in the first place.&lt;/p&gt;

&lt;p&gt;Go’s struct embedding is amazing. It disguises composition as inheritance and it is much more powerful than a class-based inheritance model, as it allows a much greater degree of flexibility.&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;h3 id=&#34;oo-s-way-1&#34;&gt;OO’s way&lt;/h3&gt;

&lt;p&gt;Better testing can be done if the classes are composed rather than inherited. If one class is composed of another class, mock objects can be easily created to do the testing of target class. Inheritance doesn&amp;rsquo;t provide this luxury. In order to test derived class, you must need its super class. If your codebase has multi-tiered inheritance structure then you will need hell a lot of classes to do a testing of a mere sub class.&lt;/p&gt;

&lt;div class=&#34;message&#34;&gt;
    The problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle. &lt;/br&gt; &lt;i&gt;— Joe Armstrong&lt;/i&gt;
&lt;/div&gt;

&lt;h3 id=&#34;go-s-way-1&#34;&gt;GO’s way&lt;/h3&gt;

&lt;p&gt;Well, Go doesn’t support inheritance so you have no other way but to compose (embed) objects.&lt;/p&gt;

&lt;h2 id=&#34;the-diamond-problem&#34;&gt;The Diamond Problem&lt;/h2&gt;

&lt;h3 id=&#34;oo-s-way-2&#34;&gt;OO’s way&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/multiple_inheritance.png&#34; width=&#34;400&#34; style=&#34;margin: auto&#34;&gt;&lt;/p&gt;

&lt;p&gt;The above example makes logical sense and is a use case of having multiple inheritance. Scanner and printer inherit from PD (PoweredDevice), and Copier inherits from both Scanner and Printer. There is a method in PD that Scanner and Printer have overridden. Now the issue is which method will Copier inherit? that of Scanner or Printer? Most OOP languages do not support multiple inheritance, but the ones which do, like C++, has a complex approach and requires explicitly stating which parent class the method to be used.&lt;/p&gt;

&lt;h3 id=&#34;go-s-way-2&#34;&gt;GO’s way&lt;/h3&gt;

&lt;p&gt;Scanner and Printer type can be embedded in Copier and a start() method can be added in Copier to decide which method to be called, so again, composition is the solution and it&amp;rsquo;s not something unique to Go, just that it makes composition easier.&lt;/p&gt;

&lt;h1 id=&#34;encapsulation&#34;&gt;Encapsulation&lt;/h1&gt;

&lt;p&gt;The concept of encapsulation is also inspired from the real world, all the inner workings of the things around you like TV, laptop or your phone is hidden from the outside world. You only interact with them through an interface. The ability of a class to hide its data and methods is Encapsulation. So what’s the problem? Well, encapsulation is all good but the way it is implemented in OOP languages is a problem.&lt;/p&gt;

&lt;h3 id=&#34;oo-s-way-3&#34;&gt;OO’s way&lt;/h3&gt;

&lt;p&gt;We generally pass objects by reference, if we pass it to a constructor, then set it to a private variable of a class then that object is in fact not safe. Keeping that object’s reference outside class is dangerous. Since Java and many other languages do not differentiate between a reference and an actual data, a class can never know whether it’s private members can be changed from outside. Dirty work around could be to always copy the passed object in the constructor.&lt;/p&gt;

&lt;p&gt;There is another issue that we have already seen in fragile base class problem and is summarised really well in the design patterns bible:&lt;/p&gt;

&lt;div class=&#34;message&#34;&gt;
Because inheritance exposes a subclass to details of its parent&#39;s implementation, it&#39;s often said that &#34;inheritance breaks encapsulation&#34; &lt;/br&gt;
&lt;i&gt;— Gang of Four, Design Patterns&lt;/i&gt;
&lt;/div&gt;

&lt;h3 id=&#34;go-s-way-3&#34;&gt;GO’s way&lt;/h3&gt;

&lt;p&gt;Pointers to the rescue. Go has pointers (like C) but there is no pointer arithmetic, in case you are scared. Objects can be passed by pointer or by value, since both are of different types, a class (struct) can define itself to either expect a value or a pointer. Passed object can be made safe by pass by value. Other than this, there are no access modifiers like private or public in Go, the first letter of a variable or struct define the accessibility. Use a capital letter and it’s public, use a lowercase letter and it’s private (slick, isn’t it?). This is not a major improvement as such and encapsulation has different meaning in Go as granularity of privacy is the package, not struct. Nonetheless it’s an improvement.&lt;/p&gt;

&lt;h1 id=&#34;polymorphism&#34;&gt;Polymorphism&lt;/h1&gt;

&lt;h3 id=&#34;oo-s-way-4&#34;&gt;OO’s way&lt;/h3&gt;

&lt;p&gt;Polymorphism is great just that you don’t need to extend from other classes to achieve polymorphism. It can be achieved through interfaces. Better have interface-based Polymorphism then inheritance-based polymorphism.&lt;/p&gt;

&lt;h3 id=&#34;go-s-way-4&#34;&gt;GO’s way&lt;/h3&gt;

&lt;p&gt;Seems like Inheritance is the real culprit. Interfaces are defined so well in Go that you don’t need inheritance at all to achieve polymorphism. Go does not require us to explicitly state that our types implement an interface. It’s actually better to work up on the requirement of the struct (class) and then label it. So if all necessary methods of an interface are defined in a struct, it implicitly implements that interface.&lt;/p&gt;

&lt;p&gt;These are some of the many benefits Go has to offer. I have barely scratched the surface. Go is actually known for its intuitive concurrency model, standard library and package system. Some of the best recent projects are written in Go — Docker, Kubernetes, InfluxDb and Hugo (Jekyll killer!)&lt;/p&gt;

&lt;p&gt;Go is neither about object-oriented programming nor functional programming. Honestly, it has little to recommend it as it does not have any buzzwords attached to it. Its simple, to the point and orthogonal.&lt;/p&gt;

&lt;div class=&#34;message&#34;&gt;
Go’s purpose is therefore not to do research into programming language design; it is to improve the working environment for its designers and their coworkers. Go is more about software engineering than programming language research. Or to rephrase, it is about language design in the service of software engineering. &lt;/br&gt; — &lt;em&gt;Rob Pike, Go’s creator.&lt;/em&gt;
&lt;/div&gt;

&lt;p&gt;That’s all folks..&lt;/p&gt;

&lt;p&gt;Hope you had a good read. If you have any questions please post it in the comments.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>String matching (KMP algorithm)</title>
          <link>https://girish3.github.io/2017/01/29/string-matching-kmp-algorithm/</link>
          <pubDate>Sun, 29 Jan 2017 00:00:00 UTC</pubDate>
          <author>Girish Budhwani</author>
          <guid>https://girish3.github.io/2017/01/29/string-matching-kmp-algorithm/</guid>
          <description>

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/cover_img.jpg&#34; width=&#34;720&#34; height=&#34;250&#34;&gt;&lt;/p&gt;

&lt;p&gt;The string matching problem also known as “the needle in a haystack” is one of the classics. This simple problem has a lot of application in the areas of Information Security, Pattern Recognition, Document Matching, Bioinformatics (DNA matching) and many more. Finding a linear time algorithm was a challenge, then came our father &lt;em&gt;Donald Knuth&lt;/em&gt; and &lt;em&gt;Vaughan Pratt&lt;/em&gt; conceiving a linear time solution in 1970 by thoroughly analysing the naive approach. It was also independently discovered by &lt;em&gt;James Morris&lt;/em&gt; in the same year. The three published the paper jointly in 1977 and from that point on it is known as the &lt;em&gt;Knuth-Morris-Pratt&lt;/em&gt; aka KMP Algorithm.&lt;/p&gt;

&lt;p&gt;This is my first blog in the series and the approach I follow is I start with the basics then keep building on it till we reach the most optimised solution. I will be using &lt;code&gt;Python&lt;/code&gt; for code snippets as it’s very much concise and readable. Here we go..&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Problem statement:&lt;/em&gt;&lt;br /&gt;
To Find the occurrences of a word &lt;strong&gt;W&lt;/strong&gt; within a main text &lt;strong&gt;T&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One naive way to solve this problem would be to compare each character of W with T. Every time there is a mismatch, we shift W to the right by 1, then we start comparing again. Let’s do it with an example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T: DoYouSeeADogHere&lt;/strong&gt; (it will be a case insensitive search for all examples)&lt;br /&gt;
&lt;strong&gt;W: dog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img1.jpg&#34; width=&#34;720&#34;&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Here is the working code of the naive approach.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bruteSearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# edge case check&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# getting the length of the strings&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wordLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;textLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# i is the index of text T from where we will start comparing the&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# the word W&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# length of the subtext has to be equal to the length of the word,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# so no need to check beyond (textLen - wordLen + 1)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wordLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# we set match to false if we find a mismatch&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wordLen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;# A mismatch&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# We found a match at index i&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;There is a match at &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# incrementing i is like shifting the word by 1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Time complexity of this naive approach is O(mn), where m and n are length of the word W and the text T respectively. Let’s see how can we make it better. Take another wacky example with &lt;em&gt;all unique characters in W&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T: duceDuck&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;W: duck&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img2.jpg&#34; width=&#34;400&#34;  &gt;&lt;/p&gt;

&lt;p&gt;As you can see in the above image, there is a mismatch at index 3. According to naive approach next step would be to shift W by 1. Since all letters in W are different, we can actually shift W by the index where mismatch occurred (3 in this case). We can say for sure there won’t be any match in between. I would recommend to try with some other similar example and check for yourself.&lt;/p&gt;

&lt;p&gt;The idea is to find out how much to shift the word W when there is a mismatch. So far we have optimised the approach only for a special case where all characters in W are unique. Let’s take another bizarre example. This one is gonna be little tricky so brace yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T: deadElephant&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;W: deadEye&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img3.jpg&#34; width=&#34;720&#34;&gt;&lt;/p&gt;

&lt;p&gt;Make sure you understand what &lt;strong&gt;green cells&lt;/strong&gt; convey. I will be using a lot of them. In the above image the green cells in the left substring is equal to the green cells in the right substring. It is actually the largest prefix which is also equal to the suffix of the substring till index 4 of the word “deadeye”. Assume for now we have found it somehow, we will work on finding out largest prefix(green cells) later. Now let&amp;rsquo;s see how it works by taking an abstract example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img4.jpg&#34; width=&#34;600&#34;&gt;&lt;/p&gt;

&lt;p&gt;str1 = str2 (green cells) and str2 = str3. When there is a mismatch after str2, we can directly shift the word till after str1 as you can see in the image. &lt;em&gt;Green cells actually tell us the index from where it should start comparing next, if there is a mismatch.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I suppose you now understand if we find out green cells for every prefix of the word W, we can skip few unnecessary matches and increase the efficiency of our algorithm. This is actually the idea behind knuth-Morris-Pratt(kmp) algorithm.&lt;/p&gt;

&lt;h2 id=&#34;in-search-of-green-cells&#34;&gt;In search of green cells&lt;/h2&gt;

&lt;p&gt;We will be using aux[] array to store the index. Unlike Naive algorithm, where we shift the word W by one and compare all characters at each shift, we use a value from aux[] to decide the next characters to be matched. No need to match characters that we know will match anyway. Let’s take yet another weird example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;W: acabacacd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img5.jpg&#34; width=&#34;600&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; define the state of our algorithm and signify that prefix of the word W before &lt;code&gt;m&lt;/code&gt; is equal to the suffix for the substring till &lt;code&gt;i-1&lt;/code&gt; i.e &lt;code&gt;W[0…m-1] = W[i-m…i-1]&lt;/code&gt;. For the above image state, 2(value of &lt;code&gt;m&lt;/code&gt;) is stored in the aux[] array for the substring till index 4(&lt;code&gt;i-1&lt;/code&gt;).
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createAux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# initializing the array aux with 0&amp;#39;s&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# for index 0, it will always be 0&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# so starting from index 1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# m can also be viewed as index of first mismatch&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# prefix = suffix till m-1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# this one is a little tricky,&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# when there is a mismatch,&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# we will check the index of previous&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# possible prefix.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# Note that we do not increment i here.&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# m = 0, we move to the next letter,&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# there was no any prefix found which &lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# is equal to the suffix for index i&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Following will be the aux array for the word &lt;em&gt;acabacacd&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img6.jpg&#34; width=&#34;600&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s use the above aux array to search the word &lt;em&gt;acabacacd&lt;/em&gt; in the following text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T: acfacabacabacacdk&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;acabacacd&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;acfacabacabacacdk&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# this method is from above code snippet.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;creatAux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# counter for word W&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# counter for text T&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# We need to handle 2 conditions when there is a mismatch&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 1st condition&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# starting again from the next character in the text T&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# aux[i-1] will tell from where to compare next&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# and no need to match for W[0..aux[i-1] - 1],&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# they will match anyway, that’s what kmp is about.&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# we found the pattern&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# printing the index&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;found pattern at &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# if we want to find more patterns, we can &lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# continue as if no match was found at this point.&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below is the snapshot of above code at some intermediate running state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://girish3.github.io/images/img7.jpg&#34; width=&#34;600&#34;&gt;&lt;/p&gt;

&lt;p&gt;You just nailed Knuth-Morris-Pratt algorithm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One last thing..&lt;/strong&gt;&lt;br /&gt;
As I said this is my first blog in the series, if you have any suggestion on how I can improve then please do share in the comments and stay tuned for more.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
